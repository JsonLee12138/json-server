package {{ .Name }}

import (
	"{{ .PkgPath }}/controller"
	"{{ .PkgPath }}/service"
	"{{ .PkgPath }}/repository"

	"github.com/JsonLee12138/jsonix/pkg/utils"
	"github.com/gofiber/fiber/v2"
	"go.uber.org/dig"
)

func ProvideController(scope *dig.Scope) error {
	return utils.TryCatchVoid(func() {
		utils.RaiseVoid(scope.Provide(controller.New{{ .UpperName }}Controller))
	}, utils.DefaultErrorHandler)
}

func ProvideService(scope *dig.Scope) error {
	return utils.TryCatchVoid(func() {
		utils.RaiseVoid(scope.Provide(service.New{{ .UpperName }}Service))
	}, utils.DefaultErrorHandler)
}

func ProvideRepository(scope *dig.Scope) error {
	return utils.TryCatchVoid(func() {
		utils.RaiseVoid(scope.Provide(repository.New{{ .UpperName }}Repository))
	}, utils.DefaultErrorHandler)
}

func RouterSetup(app *fiber.App, {{ .Name }}Controller *controller.{{ .UpperName }}Controller) {
	group := app.Group("{{ .Name }}")
	group.Get("/", {{ .Name }}Controller.HelloWorld)
}

func {{ .UpperName }}ModuleSetup(container *dig.Container) error {
    return utils.TryCatchVoid(func() {
      scope := container.Scope("{{ .Name }}")
      utils.RaiseVoid(ProvideController(scope))
			utils.RaiseVoid(ProvideService(scope))
			utils.RaiseVoid(ProvideRepository(scope))
      utils.RaiseVoid(scope.Invoke(RouterSetup))
    }, utils.DefaultErrorHandler)
}
